@* .NET to JavaScript *@

@inject IJSRuntime js

<TelerikButton OnClick="@DotNetToJavaScript">.NET to JavaScript</TelerikButton>

<p>@StringValueToUpdateFromCs</p>

@* Move JavaScript code to a separate JS file *@
<script suppress-error="BL9992">//
    function updateStringValueFromCs(valueFromServer) {
        return `JSInterop initiated by server at ${valueFromServer} ms.`;
    }
//</script>

@code {
    private string StringValueToUpdateFromCs { get; set; } = "String value to update from .NET";

    private async Task DotNetToJavaScript()
    {
        StringValueToUpdateFromCs = await js.InvokeAsync<string>("updateStringValueFromCs", DateTime.Now.Millisecond);
    }
}

@* =============== *@

@* JavaScript to .NET *@

@implements IDisposable

<button id="buttonJsToCs">JavaScript to .NET</button>

<p>@StringValueToUpdateFromJs</p>

@* Move JavaScript code to a separate JS file *@
<script suppress-error="BL9992">//
    var dotNet;

    function saveDotNetRef(dotNetRef) {
        dotNet = dotNetRef;

        var button = document.getElementById("buttonJsToCs");
        if (button) {
            button.addEventListener("click", updateStringValueFromJs);
        }
    }

    function updateStringValueFromJs() {
        dotNet.invokeMethodAsync("JavaScriptToDotNet", `JSInterop initiated by client at ${new Date().getMilliseconds()} ms.`);
    }
//</script>

@code {
    private DotNetObjectReference<JavaScript>? DotNetRef { get; set; }

    private string StringValueToUpdateFromJs { get; set; } = "String value to update from JavaScript";

    [JSInvokable("JavaScriptToDotNet")]
    public void JavaScriptToDotNet(string newStringValue)
    {
        StringValueToUpdateFromJs = newStringValue;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        DotNetRef = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1); // ensure HTML is ready
            await js.InvokeVoidAsync("saveDotNetRef", DotNetRef);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        DotNetRef?.Dispose();
    }
}
