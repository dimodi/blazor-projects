@page "/treeview-flat"

<TelerikTreeView Data="@FlatData" @bind-ExpandedItems="@ExpandedItems" />

@code {
    private IEnumerable<TreeItem> FlatData { get; set; } = new List<TreeItem>();

    private IEnumerable<object> ExpandedItems { get; set; } = new List<TreeItem>();

    private int TreeLevels { get; set; } = 3;
    private int RootItems { get; set; } = 2;
    private int ItemsPerLevel { get; set; } = 2;
    private int IdCounter { get; set; } = 1;

    protected override void OnInitialized()
    {
        FlatData = LoadFlat();

        ExpandedItems = FlatData.Where(x => x.HasChildren == true); // && x.ParentId == null
    }

    private List<TreeItem> LoadFlat()
    {
        List<TreeItem> items = new List<TreeItem>();

        PopulateChildren(items, null, 1);

        return items;
    }

    private void PopulateChildren(List<TreeItem> items, int? parentId, int level)
    {
        var itemCount = level == 1 ? RootItems : ItemsPerLevel;
        for (int i = 1; i <= itemCount; i++)
        {
            var itemId = IdCounter++;
            items.Add(new TreeItem()
            {
                Id = itemId,
                Text = $"Level {level} Item {i}",
                ParentId = parentId,
                HasChildren = level < TreeLevels
            });

            if (level < TreeLevels)
            {
                PopulateChildren(items, itemId, level + 1);
            }
        }
    }

    public class TreeItem
    {
        public int Id { get; set; }
        public string Text { get; set; } = string.Empty;
        public int? ParentId { get; set; }
        public bool HasChildren { get; set; }
    }
}

@*

    <TelerikTreeView Data="@FlatData" @bind-ExpandedItems="@ExpandedItems" />

    @code {
        public IEnumerable<TreeItem> FlatData { get; set; }
        public IEnumerable<object> ExpandedItems { get; set; } = new List<TreeItem>();

        int TreeLevels { get; set; } = 3;
        int ItemsPerLevel { get; set; } = 7;
        int IdCounter { get; set; } = 1;

        protected override void OnInitialized()
        {
            FlatData = LoadFlat();

            ExpandedItems = FlatData.Where(x => x.HasChildren == true && x.ParentId == null); // && x.ParentId == null
        }

        List<TreeItem> LoadFlat()
        {
            List<TreeItem> items = new List<TreeItem>();

            int maxId = ItemsPerLevel;
            int minId = 1;
            int parentId = minId;
            int itemId = 1;

            for (int i = 1; i <= TreeLevels; i++)
            {
                if (i > 1)
                {
                    minId = i == 2 ? 1 : minId + (int)Math.Pow(ItemsPerLevel, i - 2);
                    parentId = minId;
                }

                for (int j = 1; j <= Math.Pow(ItemsPerLevel, i); j++)
                {
                    itemId = IdCounter++;

                    items.Add(new TreeItem()
                    {
                        Id = itemId,
                        Text = $"Id {itemId}",
                        ParentId = i == 1 ? null : parentId++,
                        HasChildren = i < TreeLevels
                    });

                    if (parentId == maxId + 1)
                    {
                        parentId = minId;
                    }
                }

                maxId = itemId;
            }

            return items;
        }

        public class TreeItem
        {
            public int Id { get; set; }
            public string Text { get; set; }
            public int? ParentId { get; set; }
            public bool HasChildren { get; set; }
        }
    }

*@


@*<TelerikTreeView Data="@TreeViewData"
                     @bind-ExpandedItems="@ExpandedItems" />

    @code {
        public List<TreeItem> TreeViewData { get; set; }
        public IEnumerable<object> ExpandedItems { get; set; } = new List<TreeItem>();

        protected override void OnInitialized()
        {
            GenerateData();

            ExpandedItems = TreeViewData.Where(x => x.HasChildren == true).ToList();
        }

        public void GenerateData()
        {
            TreeViewData = new List<TreeItem>();

            int rootItems = 2;
            int allItems = rootItems * 6;

            for (int i = 1; i <= allItems; i++)
            {
                bool hasChildren = i <= allItems / rootItems;
                TreeViewData.Add(new TreeItem()
                {
                    Id = i,
                    Text = "Item " + i,
                    ParentId = i <= rootItems ? null : i / rootItems,
                    HasChildren = hasChildren,
                    Icon = hasChildren ? "folder" : "clipboard-text",
                });
            }
        }

        public class TreeItem
        {
            public int Id { get; set; }
            public int? ParentId { get; set; }
            public string Text { get; set; }
            public bool HasChildren { get; set; }
            public string Icon { get; set; }
        }
    }

    <TelerikTreeView Data="@FlatData" Size=""
                         @bind-ExpandedItems="@ExpandedItems" />

        @code {
            public IEnumerable<TreeItem> FlatData { get; set; }
            public IEnumerable<object> ExpandedItems { get; set; } = new List<TreeItem>();

            protected override void OnInitialized()
            {
                FlatData = GetFlatData();

                ExpandedItems = FlatData.Where(x => x.HasChildren == true).ToList();
            }

            List<TreeItem> GetFlatData()
            {
                List<TreeItem> items = new List<TreeItem>();

                items.Add(new TreeItem()
                {
                    Id = 1,
                    Text = "wwwroot",
                    ParentId = null,
                    HasChildren = true,
                    Icon = "folder"
                });

                items.Add(new TreeItem()
                {
                    Id = 2,
                    Text = "css",
                    ParentId = 1,
                    HasChildren = true,
                    Icon = "folder"
                });
                items.Add(new TreeItem()
                {
                    Id = 3,
                    Text = "js",
                    ParentId = 1,
                    HasChildren = true,
                    Icon = "folder"
                });

                items.Add(new TreeItem()
                {
                    Id = 4,
                    Text = "site.css",
                    ParentId = 2,
                    Icon = "css"
                });
                items.Add(new TreeItem()
                {
                    Id = 5,
                    Text = "scripts.js",
                    ParentId = 3,
                    Icon = "js"
                });

                return items;
            }

            public class TreeItem
            {
                public int Id { get; set; }
                public string Text { get; set; }
                public int? ParentId { get; set; }
                public bool HasChildren { get; set; }
                public string Icon { get; set; }
            }
        }*@
