@page "/treeview-hierarchical"

<TelerikTreeView Data="@HierarchicalData"
                 CheckBoxMode="@TreeViewCheckBoxMode.Multiple"
                 CheckChildren="true"
                 CheckParents="true"
                 SelectionMode="@TreeViewSelectionMode.Multiple"
                 @bind-ExpandedItems="@ExpandedItems"
                 @bind-CheckedItems="@CheckedItems"
                 @bind-SelectedItems="@SelectedItems" />

@code {
    public IEnumerable<TreeItem> HierarchicalData { get; set; }
    public IEnumerable<object> ExpandedItems { get; set; } = new List<TreeItem>();
    public IEnumerable<object> CheckedItems { get; set; } = new List<TreeItem>();
    public IEnumerable<object> SelectedItems { get; set; } = new List<TreeItem>();

    int TreeLevels { get; set; } = 3;
    int ItemsPerLevel { get; set; } = 3;
    int IdCounter { get; set; } = 1;

    protected override void OnInitialized()
    {
        HierarchicalData = LoadHierarchical();

        ExpandedItems = new List<TreeItem>(HierarchicalData);
        CheckedItems = new List<TreeItem>(HierarchicalData);
        SelectedItems = new List<TreeItem>(HierarchicalData);
    }

    List<TreeItem> LoadHierarchical()
    {
        List<TreeItem> items = new List<TreeItem>();
        var level = 1;

        for (int i = 1; i <= ItemsPerLevel; i++)
        {
            var itemId = IdCounter++;

            var newItem = new TreeItem()
            {
                Id = itemId,
                Text = $"Level {level} Item {i}"
            };

            items.Add(newItem);

            if (level < TreeLevels)
            {
                PopulateChildren(items, level + 1);
            }
        }

        return items;
    }

    void PopulateChildren(List<TreeItem> items, int level)
    {
        foreach (var item in items)
        {
            item.Items = new List<TreeItem>();

            for (int i = 1; i <= ItemsPerLevel; i++)
            {
                var itemId = IdCounter++;

                var newItem = new TreeItem()
                {
                    Id = itemId,
                    Text = $"Level {level} Item {i}"
                };

                item.Items.Add(newItem);

                if (level < TreeLevels)
                {
                    PopulateChildren(item.Items, level + 1);
                }
            }
        }
    }

    public class TreeItem
    {
        public int Id { get; set; }
        public string Text { get; set; }
        public List<TreeItem> Items { get; set; }
    }
}
