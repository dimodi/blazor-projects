@page "/treeview-hierarchical"

<TelerikTreeView Data="@HierarchicalData"
                 CheckBoxMode="@TreeViewCheckBoxMode.Multiple"
                 CheckChildren="true"
                 CheckParents="true"
                 SelectionMode="@TreeViewSelectionMode.Multiple"
                 @bind-ExpandedItems="@ExpandedItems"
                 @bind-CheckedItems="@CheckedItems"
                 @bind-SelectedItems="@SelectedItems" />

@code {
    private List<TreeItem> HierarchicalData { get; set; } = new();
    private IEnumerable<object> ExpandedItems { get; set; } = new List<TreeItem>();
    private IEnumerable<object> CheckedItems { get; set; } = new List<TreeItem>();
    private IEnumerable<object> SelectedItems { get; set; } = new List<TreeItem>();

    private int TreeLevels { get; set; } = 4;
    private int RootItems { get; set; } = 3;
    private int ItemsPerLevel { get; set; } = 2;
    private int IdCounter { get; set; }

    protected override void OnInitialized()
    {
        HierarchicalData = LoadHierarchical();

        // Select, check and expand the root items.
        ExpandedItems = new List<TreeItem>(HierarchicalData);
        // CheckChildren and CheckParents don't affect programmatic checking.
        CheckedItems = new List<TreeItem>(HierarchicalData);
        SelectedItems = new List<TreeItem>(HierarchicalData);
    }

    private List<TreeItem> LoadHierarchical()
    {
        List<TreeItem> items = new List<TreeItem>();

        PopulateItems(items, 1);

        return items;
    }

    private void PopulateItems(List<TreeItem> items, int level)
    {
        for (int i = 1; i <= (level == 1 ? RootItems : ItemsPerLevel); i++)
        {
            var itemId = ++IdCounter;

            var newItem = new TreeItem()
            {
                Id = itemId,
                Text = $"Level {level} Item {i} Id {itemId}"
            };

            items.Add(newItem);

            if (level < TreeLevels)
            {
                PopulateChildren(items, level + 1);
            }
        }
    }

    private void PopulateChildren(List<TreeItem> items, int level)
    {
        foreach (var item in items)
        {
            item.Items = new List<TreeItem>();

            PopulateItems(item.Items, level);
        }
    }

    public class TreeItem
    {
        public int Id { get; set; }
        public string Text { get; set; } = string.Empty;
        public List<TreeItem>? Items { get; set; }
    }
}
