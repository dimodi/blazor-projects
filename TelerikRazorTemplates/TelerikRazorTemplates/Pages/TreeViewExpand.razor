@page "/treeview-expand"
@*https://supportheroes.telerik.com/ticket/1552999*@

<p>
    <label>Item Id: <TelerikNumericTextBox @bind-Value="@ItemToExpand" Width="80px" /></label>
    <TelerikButton OnClick="@ExpandItem">Expand Item @ItemToExpand</TelerikButton>
</p>
<p>
    <TelerikButton OnClick="@ExpandRoot">Expand Root Items</TelerikButton>
    <TelerikButton OnClick="@ExpandAll">Expand All</TelerikButton>
    <TelerikButton OnClick="@CollapseAll">Collapse All</TelerikButton>
</p>

<TelerikTreeView Data="@FlatData"
                 @bind-ExpandedItems="@ExpandedItems"
                 @bind-SelectedItems="@SelectedItems"
                 SelectionMode="@TreeViewSelectionMode.Single" />

@code {
    public IEnumerable<TreeItem> FlatData { get; set; }
    public IEnumerable<object> ExpandedItems { get; set; } = new List<TreeItem>();
    public IEnumerable<object> SelectedItems { get; set; } = new List<TreeItem>();

    int ItemToExpand { get; set; }
    Random rnd { get; set; } = new Random();

    void ExpandItem()
    {
        var allItemsToExpand = new List<TreeItem>();
        var leafItem = FlatData.Where(x => x.Id == ItemToExpand).FirstOrDefault();
        int? parentId = null;

        if (leafItem != null)
        {
            // item selection is not required for expanding
            SelectedItems = new List<TreeItem>() { leafItem };

            allItemsToExpand.Add(leafItem);
            parentId = leafItem.ParentId;
            while (parentId != null)
            {
                var parentItem = FlatData.Where(x => x.Id == parentId).FirstOrDefault();
                allItemsToExpand.Add(parentItem);
                parentId = parentItem.ParentId;
            }
        }

        ExpandedItems = allItemsToExpand;

        ItemToExpand = rnd.Next(1, FlatData.Count() + 1);
    }

    void ExpandRoot()
    {
        ExpandedItems = FlatData.Where(x => x.ParentId == null && x.HasChildren == true);
    }

    void ExpandAll()
    {

        ExpandedItems = FlatData.Where(x => x.HasChildren == true);

        // this will work too:
        //ExpandedItems = FlatData;
    }

    void CollapseAll()
    {
        ExpandedItems = new List<TreeItem>();
    }

    protected override void OnInitialized()
    {
        FlatData = LoadFlat();

        ItemToExpand = rnd.Next(1, FlatData.Count() + 1);
    }

    #region TreeView data generation

    int TreeLevels { get; set; } = 3;
    int ItemsPerLevel { get; set; } = 3;
    int IdCounter { get; set; } = 1;

    List<TreeItem> LoadFlat()
    {
        List<TreeItem> items = new List<TreeItem>();

        PopulateTreeItems(items, null, 1);

        return items;
    }

    void PopulateTreeItems(List<TreeItem> items, int? parentId, int level)
    {
        for (int i = 1; i <= ItemsPerLevel; i++)
        {
            var itemId = IdCounter++;
            items.Add(new TreeItem()
            {
                Id = itemId,
                Text = $"Level {level} Item {i} Id {itemId}",
                ParentId = parentId,
                HasChildren = level < TreeLevels
            });

            if (level < TreeLevels)
            {
                PopulateTreeItems(items, itemId, level + 1);
            }
        }
    }

    #endregion

    public class TreeItem
    {
        public int Id { get; set; }
        public string Text { get; set; }
        public int? ParentId { get; set; }
        public bool HasChildren { get; set; }
    }
}

@*@using System.Timers
    @implements IDisposable

    <TelerikNumericTextBox @bind-Value="@ItemToExpand" Width="80px" />
    <TelerikButton OnClick="@ExpandItem">Expand Item @ItemToExpand</TelerikButton>
    <TelerikButton OnClick="@ExpandAll">Expand All</TelerikButton>
    <TelerikButton OnClick="@CollapseAll">Collapse All</TelerikButton>
    <p><label>
        <TelerikCheckBox Value="@AutomaticExpansion" OnChange="@ToggleTimer" />
        Expand random items automatically
    </label></p>

    <TelerikTreeView Data="@FlatData"
                     @bind-ExpandedItems="@ExpandedItems"
                     @bind-SelectedItems="@SelectedItems"
                     SelectionMode="@TreeViewSelectionMode.Single" />

    @code {
        public IEnumerable<TreeItem> FlatData { get; set; }
        public IEnumerable<object> ExpandedItems { get; set; } = new List<TreeItem>();
        public IEnumerable<object> SelectedItems { get; set; } = new List<TreeItem>();

        bool AutomaticExpansion { get; set; } = true;
        int ItemToExpand { get; set; }
        Random rnd { get; set; } = new Random();
        Timer TreeViewTimer { get; set; }

        int TreeLevels { get; set; } = 5;
        int ItemsPerLevel { get; set; } = 3;
        int IdCounter { get; set; } = 1;

        void ExpandItem()
        {
            var allItemsToExpand = new List<TreeItem>();
            var leafItem = FlatData.Where(x => x.Id == ItemToExpand).FirstOrDefault();
            int? parentId = null;

            if (leafItem != null)
            {
                SelectedItems = new List<TreeItem>() { leafItem };

                allItemsToExpand.Add(leafItem);
                parentId = leafItem.ParentId;
                while (parentId != null)
                {
                    var parentItem = FlatData.Where(x => x.Id == parentId).FirstOrDefault();
                    allItemsToExpand.Add(parentItem);
                    parentId = parentItem.ParentId;
                }
            }

            //ExpandedItems = ExpandedItems.Union(allItemsToExpand);
            ExpandedItems = allItemsToExpand;

            ItemToExpand = rnd.Next(1, FlatData.Count() + 1);
        }

        void ExpandAll()
        {
            ExpandedItems = FlatData;
        }

        void CollapseAll()
        {
            ExpandedItems = new List<TreeItem>();
        }

        void AutoExpandItem(object source, ElapsedEventArgs args)
        {
            ExpandItem();
            InvokeAsync(StateHasChanged);
        }

        void ToggleTimer(object newValue)
        {
            AutomaticExpansion = (bool)newValue;

            if (AutomaticExpansion)
            {
                TreeViewTimer.Start();
            }
            else
            {
                TreeViewTimer.Stop();
            }
        }

        protected override void OnInitialized()
        {
            FlatData = LoadFlat();

            ItemToExpand = rnd.Next(1, FlatData.Count() + 1);

            TreeViewTimer = new Timer(2000);
            TreeViewTimer.Elapsed += AutoExpandItem;
            TreeViewTimer.Enabled = AutomaticExpansion;

            //ExpandedItems = FlatData.Where(x => x.HasChildren == true); // && x.ParentId == null
        }

        public void Dispose()
        {
            TreeViewTimer?.Dispose();
        }

        List<TreeItem> LoadFlat()
        {
            List<TreeItem> items = new List<TreeItem>();

            PopulateChildren(items, null, 1);

            return items;
        }

        void PopulateChildren(List<TreeItem> items, int? parentId, int level)
        {
            for (int i = 1; i <= ItemsPerLevel; i++)
            {
                var itemId = IdCounter++;
                items.Add(new TreeItem()
                {
                    Id = itemId,
                    Text = $"Level {level} Item {i} Id {itemId}",
                    ParentId = parentId,
                    HasChildren = level < TreeLevels
                });

                if (level < TreeLevels)
                {
                    PopulateChildren(items, itemId, level + 1);
                }
            }
        }

        public class TreeItem
        {
            public int Id { get; set; }
            public string Text { get; set; }
            public int? ParentId { get; set; }
            public bool HasChildren { get; set; }
        }
    }*@
