@page "/grid-expando"

@using System.Dynamic

<TelerikGrid Data="@GridData"
             TItem="@ExpandoObject"
             Pageable="true"
             Sortable="true"
             FilterMode="GridFilterMode.FilterRow">
    <GridColumns>
        @if (GridData != null && GridData.Any())
        {
            var firstItem = GridData.First();
            var dictionaryItem = (IDictionary<string, object>)firstItem;

            var fields = dictionaryItem.Keys;

            foreach (var item in dictionaryItem)
            {
                <GridColumn Field="@item.Key" FieldType="@item.Value.GetType()">
                    <Template>
                        @{
                            var product = context as IDictionary<string, object>;

                            var value1 = product[item.Key];

                            object value2;
                            product.TryGetValue(item.Key, out value2);

                            <span>
                                one way: @value1
                                <br />
                                another way: @value2
                                <br />
                                always first row: @item.Value
                            </span>
                        }
                    </Template>
                </GridColumn>
            }
        }
    </GridColumns>
</TelerikGrid>

@code {
    List<ExpandoObject> GridData { get; set; }

    protected override void OnInitialized()
    {
        GridData = new List<ExpandoObject>();
        var rnd = new Random();

        for (int i = 1; i <= 7; i++)
        {
            ExpandoObject product = new ExpandoObject();

            product.TryAdd("Id", i);
            product.TryAdd("Name", "Product " + i);
            product.TryAdd("Price", (decimal)rnd.Next(1, 100));
            product.TryAdd("ReleaseDate", DateTime.Now.AddDays(-rnd.Next(60, 1000)));
            product.TryAdd("Active", i % 3 != 0);

            GridData.Add(product);
        }
    }
}

@*@using System.Dynamic

    <TelerikGrid Data="@GridData"
                 Pageable="true"
                 Sortable="true"
                 FilterMode="@GridFilterMode.FilterRow"
                 EditMode="@GridEditMode.Incell"
                 OnEdit="@OnGridEdit"
                 OnUpdate="@OnGridUpdate"
                 OnCreate="@OnGridCreate">
        <GridToolBar>
            <GridCommandButton Command="Add" Icon="add">Add Item</GridCommandButton>
        </GridToolBar>
        <GridColumns>
            @{
                if (GridData != null && GridData.Any())
                {
                    var firstDataItem = (IDictionary<string, object>)GridData.First();

                    foreach (var item in firstDataItem)
                    {
                        if (item.Key != "Id")
                        {
                            <GridColumn Field="@item.Key" FieldType="@item.Value.GetType()" @key="@item.Key"
                                        OnCellRender="@( (GridCellRenderEventArgs args) => OnGridCellRender(args, item.Key) )">
                            </GridColumn>
                        }
                    }
                }
            }
        </GridColumns>
    </TelerikGrid>

    <style>
        td.updated {
            background: #cfc;
        }
    </style>


    @code {
        private List<ExpandoObject> GridData { get; set; } = new List<ExpandoObject>();

        private IDictionary<string, object> GridEditItem { get; set; }

        List<UpdatedItem> UpdatedValues { get; set; } = new();

        string UpdatedClass { get; set; } = "updated";

        private void OnGridCellRender(GridCellRenderEventArgs args, string column)
        {
            var item = (dynamic)args.Item;

            var isUpdated = UpdatedValues.FirstOrDefault(x => x.itemId == item.Id && x.itemProperty == column);

            if (isUpdated != null)
            {
                args.Class = UpdatedClass;
            }
        }

        private async Task OnGridEdit(GridCommandEventArgs args)
        {
            GridEditItem = (IDictionary<string, object>)args.Item;
        }

        private async Task OnGridUpdate(GridCommandEventArgs args)
        {
            var item = (IDictionary<string, object>)args.Item;

            if (GridEditItem[args.Field].ToString() != item[args.Field].ToString())
            {
                UpdatedValues.Add(new UpdatedItem() { itemId = Convert.ToInt32(GridEditItem["Id"]), itemProperty = args.Field });
                GridEditItem[args.Field] = item[args.Field];
            }

            foreach (string key in item.Keys)
            {
                if (GridEditItem[key].ToString() != item[key].ToString())
                {
                    UpdatedValues.Add(new UpdatedItem() { itemId = Convert.ToInt32(GridEditItem["Id"]), itemProperty = key });
                    GridEditItem[key] = item[key];
                }
            }
        }

        private async Task OnGridCreate(GridCommandEventArgs args)
        {
            var item = args.Item as ExpandoObject;

            ((IDictionary<string, object>)item)["Id"] = GridData.Count + 1;

            GridData.Insert(0, item);
        }

        protected override async Task OnInitializedAsync()
        {
            for (int i = 1; i <= 15; i++)
            {
                dynamic expando = new ExpandoObject();

                expando.Id = i;
                expando.PropertyInt = i;
                expando.PropertyString = "String " + i;
                expando.PropertyDate = DateTime.Now.AddMonths(-i);

                GridData.Add(expando);
            }
        }

        public class UpdatedItem
        {
            public int itemId { get; set; }
            public string itemProperty { get; set; }
        }
    }
*@