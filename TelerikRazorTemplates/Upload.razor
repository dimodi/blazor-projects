@inject NavigationManager NavigationManager

<h2>Any file, provide a download link</h2>
<TelerikUpload SaveUrl="@ToAbsoluteUrl("api/upload/save")"
               RemoveUrl="@ToAbsoluteUrl("api/upload/remove")"
               MaxFileSize="@( 10 * 1024 * 1024 )"
               OnSuccess="@OnUploadSuccessForDownLoad">
</TelerikUpload>

@if (!String.IsNullOrEmpty(FileNameForDownload))
{
    <p> <a href="@( FileNameForDownload )"> Download @FileNameForDownload </a> </p>

    @if (ImageFiles.Where(x => FileNameForDownload.Contains(x)).Any())
    {
        <p><img src="@FileNameForDownload" /></p>
    }
}

<h2>Up to 1 KB, see file content</h2>
<TelerikUpload SaveUrl="@ToAbsoluteUrl("api/upload/processcontent")"
               OnSuccess="@OnUploadSuccessForShow"
               MaxFileSize="@( 1 * 1024 )">
</TelerikUpload>

<TelerikTextArea @bind-Value="@Response" Width="300px" Rows="5" />

@code {
    private readonly string[] ImageFiles = { ".jpg", ".jpeg", ".gif", ".png", ".bmp" };

    private string Response { get; set; } = string.Empty;

    private string FileNameForDownload { get; set; } = string.Empty;

    private void OnUploadSuccessForDownLoad(UploadSuccessEventArgs args)
    {
        if (args.Operation == UploadOperationType.Upload)
        {
            FileNameForDownload = args.Files.First().Name;
        }
        else
        {
            FileNameForDownload = string.Empty;
        }
    }

    private void OnUploadSuccessForShow(UploadSuccessEventArgs args)
    {
        if (args.Operation == UploadOperationType.Upload)
        {
            Response += args.Request.ResponseText;
        }
    }

    private string ToAbsoluteUrl(string url)
    {
        return $"{NavigationManager.BaseUri}{url}";
    }
}
