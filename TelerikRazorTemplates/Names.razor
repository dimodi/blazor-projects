@page "/names"

<TelerikGrid Data="@Employees" AutoGenerateColumns="true" />

@code {
    private List<int> SelectedIds { get; set; } = new();

    private List<Employee> Employees { get; set; } = new();

    protected override void OnInitialized()
    {
        for (int i = 1; i <= 10; i++)
        {
            Employees.Add(new Employee()
            {
                Id = i,
                FirstName = $"{Word(minLength: 3, maxLength: 9)}",
                LastName = $"{Word()}",
                Code = $"{Word(alternateVowels: false, minLength: 5, maxLength: 5).ToUpperInvariant()}"
            });
        }

        base.OnInitialized();
    }

    private readonly List<string> Vowels = new List<string>() { "a", "e", "i", "o", "u", "y" };
    private readonly List<string> Consonants = new List<string>() { "b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "n", "p", "q", "r", "s", "t", "v", "w", "x", "z" };

    private const int AsciiCode_A = 65;
    private const int AsciiCode_Z = 90;
    private const int AsciiCode_a = 97;
    private const int AsciiCode_z = 122;

    private string Word(bool alternateVowels = true, bool capitalize = true, int minLength = 3, int maxLength = 7)
    {
        string result = "";
        int wordLength = Random.Shared.Next(minLength, maxLength);

        if (alternateVowels)
        {
            bool firstLetterIsVowel = Random.Shared.Next(0, 2) % 2 == 0;

            result += firstLetterIsVowel ? Vowel(upperCase: capitalize) : Consonant(upperCase: capitalize);

            for (int i = 1; i < wordLength; i++)
            {
                result += i % 2 != Convert.ToInt32(firstLetterIsVowel) ? Vowel() : Consonant();
            }
        }
        else
        {
            result += Letter(upperCase: capitalize);

            for (int i = 1; i < wordLength; i++)
            {
                result += Letter();
            }
        }

        return result;
    }

    private string Vowel(bool upperCase = false)
    {
        string result = Vowels.ElementAt(Random.Shared.Next(0, Vowels.Count));

        return upperCase ? result.ToUpperInvariant() : result;
    }

    private string Consonant(bool upperCase = false)
    {
        string result = Consonants.ElementAt(Random.Shared.Next(0, Consonants.Count));

        return upperCase ? result.ToUpperInvariant() : result;
    }

    private string Letter(bool upperCase = false, bool? vowel = null)
    {
        string result = "";

        if (vowel.HasValue)
        {
            result = vowel.Value ? Vowel() : Consonant();

            return upperCase ? result.ToUpperInvariant() : result;
        }

        int minAsciiCode = upperCase ? AsciiCode_A : AsciiCode_a;
        int maxAsciiCode = upperCase ? AsciiCode_Z : AsciiCode_z;

        return ((char)Random.Shared.Next(minAsciiCode, maxAsciiCode + 1)).ToString();
    }

    public class Employee
    {
        public int Id { get; set; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Code { get; set; } = string.Empty;
    }
}
