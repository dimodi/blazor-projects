@page "/no-data-service"

@using Microsoft.EntityFrameworkCore

@implements IDisposable

@inject IDbContextFactory<DbContextEF> DbContextFactory

<PageTitle>No Data Service</PageTitle>

<h1>No Data Service</h1>

<h2>Categories</h2>

<TelerikGrid Data="@CategoryData"
             Sortable="true"
             Pageable="true"
             FilterMode="@GridFilterMode.FilterRow"
             EditMode="@GridEditMode.Incell"
             OnUpdate="@OnCategoryUpdate"
             OnCreate="@OnCategoryCreate"
             OnDelete="OnCategoryDelete"
             ConfirmDelete="true">
    <GridToolBarTemplate>
        <GridCommandButton Command="Add" Icon="@SvgIcon.Plus">Add Category</GridCommandButton>
    </GridToolBarTemplate>
    <GridColumns>
        <GridColumn Field="@nameof(Category.Id)" Editable="false" Filterable="false" Width="80px" />
        <GridColumn Field="@nameof(Category.Name)" />
        <GridCommandColumn Width="160px">
            <GridCommandButton Command="Delete" Icon="@SvgIcon.Trash">Delete</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
</TelerikGrid>

@code {
    private List<Category> CategoryData { get; set; } = new();

    private async Task OnCategoryCreate(GridCommandEventArgs args)
    {
        var createdCategory = (Category)args.Item;

        if (string.IsNullOrEmpty(createdCategory.Name))
        {
            createdCategory.Name = $"New Category";
        }

        DbContextEF!.Categories.Add(createdCategory);
        await DbContextEF!.SaveChangesAsync();

        CategoryData.Insert(0, createdCategory);
    }

    private async Task OnCategoryUpdate(GridCommandEventArgs args)
    {
        var updatedCategory = (Category)args.Item;

        var originalCategory = await DbContextEF!.Categories.FirstOrDefaultAsync(x => x.Id == updatedCategory.Id);

        if (originalCategory != null)
        {
            DbContextEF!.Categories.Entry(originalCategory).State = EntityState.Detached;
            DbContextEF!.Categories.Update(updatedCategory);
            await DbContextEF!.SaveChangesAsync();

            await LoadData();
        }
    }

    private async Task OnCategoryDelete(GridCommandEventArgs args)
    {
        var deletedCategory = (Category)args.Item;

        DbContextEF!.Categories.Remove(deletedCategory);
        await DbContextEF!.SaveChangesAsync();

        await LoadData();
    }

    private async Task LoadData()
    {
        CategoryData = await DbContextEF!.Categories.AsNoTracking().ToListAsync();
    }

    private DbContextEF? DbContextEF { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DbContextEF = await DbContextFactory.CreateDbContextAsync();

        await LoadData();

        await base.OnInitializedAsync();
    }

    public void Dispose() => DbContextEF?.Dispose();
}
