@page "/"

@using System.Security.Claims

<PageTitle>Home</PageTitle>

@inject AuthenticationStateProvider AuthenticationStateProvider

<TelerikButton OnClick="@SignInAsUser">Sign In As User</TelerikButton>
<TelerikButton OnClick="@SignInAsAdmin">Sign In As Admin</TelerikButton>

<TelerikButton OnClick="@SignOut">Sign Out</TelerikButton>

<p>Outside <code>AuthorizeView</code>:</p>
<ul>
    <li>Is any user: <strong>@IsUserSignedIn</strong></li>
    <li>Is power user: <strong>@IsPowerUserSignedIn</strong></li>
</ul>

<AuthorizeView>
    <Authorized>
        <p style="color:green"><code>AuthorizeView</code>: Authorized as @context.User.Identity?.Name</p>
    </Authorized>
    <NotAuthorized>
        <p style="color:blue"><code>AuthorizeView</code>: Not authorized</p>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Roles="Admin">
    <Authorized>
        <p style="color:red"><code>AuthorizeView</code>: Authorized in role Admin</p>
    </Authorized>
    <NotAuthorized>
        <p style="color:blue"><code>AuthorizeView</code>: Not authorized in role Admin</p>
    </NotAuthorized>
</AuthorizeView>

<h3>AuthorizeView manages all Grid columns</h3>

<TelerikGrid Data="@GridData" ShowColumnMenu="true">
    <GridColumns>
        <AuthorizeView Roles="User,Admin" Context="parentAuthContext">
            <Authorized>
                <GridColumn Field="@nameof(SampleModel.Name)" />
                <GridColumn Field="@nameof(SampleModel.Price)">
                    <HeaderTemplate>
                        <strong style="color:green">Price</strong>
                    </HeaderTemplate>
                </GridColumn>
                <AuthorizeView Roles="Admin">
                    <Authorized Context="childAuthContext">
                        <GridColumn Field="@nameof(SampleModel.Quantity)">
                            <HeaderTemplate>
                                <strong style="color:red">Quantity</strong>
                            </HeaderTemplate>
                        </GridColumn>
                    </Authorized>
                </AuthorizeView>
            </Authorized>
            <NotAuthorized>
                <GridColumn Field="@nameof(SampleModel.Name)" />
            </NotAuthorized>
        </AuthorizeView>
    </GridColumns>
</TelerikGrid>

<h3>AuthenticationStateProvider manages the columns' Visible parameter</h3>

<TelerikGrid Data="@GridData" ShowColumnMenu="true">
    <GridColumns>
        <GridColumn Field="@nameof(SampleModel.Name)" />
        <GridColumn Field="@nameof(SampleModel.Price)" Visible="@IsUserSignedIn" VisibleInColumnChooser="@IsUserSignedIn">
            <HeaderTemplate>
                <strong style="color:green">Price</strong>
            </HeaderTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(SampleModel.Quantity)" Visible="@IsPowerUserSignedIn" VisibleInColumnChooser="@IsPowerUserSignedIn">
            <HeaderTemplate>
                <strong style="color:red">Quantity</strong>
            </HeaderTemplate>
        </GridColumn>
    </GridColumns>
</TelerikGrid>

@code {
    private List<SampleModel> GridData { get; set; } = new();

    private bool IsUserSignedIn => UserHasAnyRole();
    private bool IsPowerUserSignedIn => UserHasSpecificRole("Admin");

    private void SignInAsUser()
    {
        ((CustomAuthStateProvider)AuthenticationStateProvider)
            .SignIn("loserUsername");
    }

    private void SignInAsAdmin()
    {
        ((CustomAuthStateProvider)AuthenticationStateProvider)
            .SignIn("powerUsername", "Admin");
    }

    private void SignOut()
    {
        ((CustomAuthStateProvider)AuthenticationStateProvider)
            .SignOut();
    }

    private bool UserHasAnyRole()
    {
        AuthenticationState authState = ((CustomAuthStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync().Result;

        return authState.User.Claims.Any(x => x.Type == ClaimTypes.Role && !string.IsNullOrEmpty(x.Value));
    }

    private bool UserHasSpecificRole(string expectedRole)
    {
        AuthenticationState authState = ((CustomAuthStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync().Result;

        return authState.User.Claims.Any(x => x.Type == ClaimTypes.Role && x.Value == expectedRole);
    }

    protected override void OnInitialized()
    {
        for (int i = 1; i <= 3; i++)
        {
            GridData.Add(new SampleModel()
            {
                Id = i,
                Name = $"Name {i}",
                Price = Random.Shared.Next(1, 100) * 1.23m,
                Quantity = Random.Shared.Next(0, 1000)
            });
        }
    }

    public class SampleModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int Quantity { get; set; }
    }
}
